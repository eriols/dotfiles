let firstrow = take length [[1, 2, 3], [4, 5, 6]]
length [1, 2, 3]
length [[1, 2, 3], [4, 5, 6]]
spiral [[1, 2, 3], [4, 5, 6]]
:l spiral
:reload spiral
reload spiral
spiral [[1, 2, 3], [4, 5, 6]]
:l spiral
:t reverse
:t length
:t intersperse
:t transpose
:l spiral
reverse "floodiz"
words "batong yes"
length "brallan"
length brallan
words 'b' 'a'
words batong
:t reverse
:help
main
main bengt
:l main
main bengt
main
Main
reverse batong
reverse
:l reverse
:1 reverse
:1 reverse
1: reverse
1:reverse
ghc --make reverse.hs
ghci ./reverse.hs
ghc --make reverse
runhaskell reverse.hs "hej hoj ho"
runhaskell reverse.hs
:t getLine
q
:t tail
product [2,4,5]
product [2,4]
product 2 4
product [1..5]
:t 'a'
:t : `a`
:t : 'a'
triangles` 
triangles
let triangles
let triangles = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2,a+b+c == 24]
triangles
let triangles = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2]
triangles
triangels
let triangles = [ (a,b,c) | c <- [1..10], b <- [1..10], a <- [1..10]]
zip [5, 4, 3, 2] [1, 2, 3, 4]
quit
exit
[c | c <- "IdontLIKEFROGS", c `elem` ['A'..'Z']]
[c | c <- "IdontLIKEFROGS", c `elem` ['A'..'Z']]
[c | c <- ["IdontLIKEFROGS"], c `elem` [`A`..`Z`]]
[c | c <- ["IdontLIKEFROGS"], c `elem` ['A'..'Z']]
[x*y | x <- [2, 5, 10], y <- [8, 10, 11 ], x*y > 50]
[x*y | x <- [2, 5, 10], y <- [8, 10, 11 ]]
[if x < 10 then "Boom" else "Bang " | x <- [7..13], odd x]
[if x < 10 then "Boom" else "Bang " | x <- [5..20], odd x]
[x | x <- [50..100], x `mod` 7 == 3]
52 `mod`7
52 `mod`7
52 / 7
[x | x <- [50..100], x `mod` 7 == 3]
[x | x <- [50..10], x `mod` 7 == 3]
[x | x <- [50..10], x mod 7 == 3]
[x | x <- [50..10], x 'mod' 7 == 3]
[x | x <- [50..10], x ´mod´ 7 == 3]
[x | x <- [50..10], x 'mod' 7 == 3]
[x * 2 | x <- [1..10], x*2>=12]
[x * 2 | x <- [1..10]], x*2>=12
[x * 2 | x <- [1..10]]
x * 2 | x <- [1..10]
x * 2 | [1..10]
take 24 [13, 26..]
take 0 [1, 2, 3]
take 1 [1, 2, 3]
take 2 [5, 2, 1, 4]
head [5, 2, 1, 4]
hail [5, 2, 1, 4]
tail [5, 2, 1, 4]
last [5, 2, 1, 4]
:set prompt "ghci> "
succ 3
5 == 4
True && False
2 + 15
